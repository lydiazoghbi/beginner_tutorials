/*
 * BSD License
 *
 * Copyright (c) Lydia Zoghbi 2019
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, 
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, 
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
/**
 *  @file       listener.cpp
 *  @author     Lydia Zoghbi
 *  @copyright  Copyright BSD License
 *  @date       11/02/2019
 *  @version    1.0
 *
 *  @brief      Listener file for the ENPM808X ROS Assignment
 *
 */


#include "ros/ros.h"
#include "std_msgs/String.h"
#include "beginner_tutorials/string_modifier.h"

/**
 *  @brief      Callback function for the function outputting the string
 *
 *  @param      A constant string
 *
 *  @return     Nothing
 */
void chatterCallback(const std_msgs::String::ConstPtr& msg) {
  ROS_INFO("I am receiving: [%s]", msg->data.c_str());
}

/**
 *  @brief      Main loop for the listener
 *
 *  @param      ROS argument count
 *  @param	ROS argument vector
 *
 *  @return     0 exit status 
 */
int main(int argc, char **argv) {

// Initiates the listener node
  ros::init(argc, argv, "listener");

// Creates the nodehandle object, initiates the node, and closes it off at the end
  ros::NodeHandle n;

// Creates the subscriber object
  auto sub = n.subscribe("chatter", 1000, chatterCallback);

// Will enter a loop, exits only when Ctrl-C is pressed or node shutdown by Master
  ros::spin();

  return 0;
}
