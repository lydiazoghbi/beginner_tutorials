/*
 * BSD License
 *
 * Copyright (c) Lydia Zoghbi 2019
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, 
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, 
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
 * ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
/**
 *  @file       talker.cpp
 *  @author     Lydia Zoghbi
 *  @copyright  Copyright BSD License
 *  @date       11/11/2019
 *  @version    1.0
 *
 *  @brief      Talker file for the ENPM808X ROS Assignment
 *
 */

#include <tf/transform_broadcaster.h>
#include <sstream>
#include "ros/ros.h"
#include "std_msgs/String.h"
#include "beginner_tutorials/string_modifier.h"

/**
 *  @brief      Main function for modifiying a string through a server
 *
 *  @param      Takes as input a request message
 *  @param	Takes as input a response message
 *
 *  @return     Returns true after successfully being called
 */
bool stringModifier(beginner_tutorials::string_modifier::Request &req, beginner_tutorials::string_modifier::Response &res) {
 std::string message;
 message = req.input;
 res.output = message;
 ROS_WARN_STREAM(res.output);
 return true;
}

/**
 *  @brief      Main function for running ROS continuously
 *
 *  @param      ROS argument count
 *  @param	ROS argument vector
 *
 *  @return     A 0 technically, but will effectively output whatever is inside 
 */
int main(int argc, char **argv) {

// Initialize ros and name it as talker
  ros::init(argc, argv, "talker");

// Initialize the message because cpplint wants to be a pain
  std::string message = "Another customized message by Lydia: ";

// NodeHandle is the main access point to communications with the ROS system.
  ros::NodeHandle n;

// Initialize the transform
  static tf::TransformBroadcaster br;
  tf::Transform transform;


// Initialize the advertiser
  auto chatter_pub = n.advertise<std_msgs::String>("chatter", 1000);

// Initialize the server
  auto server = n.advertiseService("string_modifier", &stringModifier);
  int freq = 10;

// If ROS is received 2 inputs arguments, one of them must be the frequency
  if (argc == 2) {
	ROS_DEBUG_STREAM("User did input a different frequency");
	if (atoi(argv[1]) < 0) {
		ROS_ERROR_STREAM("Frequency can't be negative, you're drunk, 10 Hz is assumed");
		freq = 10;
	} else if (atoi(argv[1]) == 0) {
		ROS_FATAL_STREAM("To publish or not to publish? That is the question!");
		return 1;
	} else if (atoi(argv[1]) >= 50000) {
		ROS_WARN_STREAM("You sure your pc can handle a rate of 0.02 ms?");
		freq = atoi(argv[1]);
	} else {  freq = atoi(argv[1]);
		ROS_INFO_STREAM("Thank you for showing some reason!");
	}
}

// Set the frequency at which ROS will publish/iterate its main loop
  ros::Rate loop_rate(freq);

// Just a counter for outputting values
  auto count = 0;

// While ROS is running fine, no fatal errors
  while (ros::ok()) {

    ROS_DEBUG_STREAM("The publisher frequency is now "<<freq<<" Hz");

// Create message object
    std_msgs::String msg;

// Output a string in the terminal
    std::stringstream ss;
    ss << message << count;
    msg.data = ss.str();

    ROS_INFO("%s", msg.data.c_str());

// Send a msg object to the chattercatki
    chatter_pub.publish(msg);

// Define the (xyz) position of the transform
    transform.setOrigin(tf::Vector3(0.0, 0.0, 0.0));

// Define the roll-pitch-yaw orientation of the transform
    tf::Quaternion q;
    q.setRPY(0.0, 0.0, 0.0);
    transform.setRotation(q);

// Broadcast the transform
    br.sendTransform(tf::StampedTransform(transform, ros::Time::now(), "world", "talk"));

// Loop once for handling events
    ros::spinOnce();

// Wait until the frequency period has elapsed to loop second time to preserve frequency
    loop_rate.sleep();
    ++count;
  }


  return 0;
}

